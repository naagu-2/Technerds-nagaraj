#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct CircularQueue {
    struct Node *front, *rear;
};

void initialize(struct CircularQueue* q)
{ q->front = q->rear = NULL; 
    
}

int isEmpty(struct CircularQueue* q) {
    return q->front == NULL; 
}

void enqueue(struct CircularQueue* q, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) return;
       newNode->data = value;
    if (isEmpty(q)) {
        newNode->next = newNode;
        q->front = q->rear = newNode;
    } else {
        newNode->next = q->front;
        q->rear->next = newNode;
        q->rear = newNode;
    }
    printf("%d enqueued\n", value);
}

int dequeue(struct CircularQueue* q) {
    if (isEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    }
    struct Node* temp = q->front;
    int data = temp->data;
    if (q->front == q->rear)
        q->front = q->rear = NULL;
    else {
        q->front = q->front->next;
        q->rear->next = q->front;
    }
    free(temp);
    return data;
}

int peek(struct CircularQueue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    return q->front->data;
}

void display(struct CircularQueue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return;
    }
    struct Node* temp = q->front;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != q->front);
    printf("(Back to Front)\n");
}

void freeQueue(struct CircularQueue* q) { while (!isEmpty(q)) dequeue(q); }

int main() {
    struct CircularQueue q;
    initialize(&q);
    int choice, value;
    while (1) {
        printf("\n1.Enqueue 2.Dequeue 3.Peek 4.Display 5.Exit\nEnter choice: ");
        scanf("%d", &choice);
        if (choice == 5) break;
        switch (choice) {
            case 1: printf("Enter value: "), scanf("%d", &value), enqueue(&q, value); break;
            case 2: if ((value = dequeue(&q)) != -1) printf("Dequeued: %d\n", value); break;
            case 3: if ((value = peek(&q)) != -1) printf("Front: %d\n", value); break;
            case 4: display(&q); break;
            default: printf("Invalid choice!\n");
        }
    }
    freeQueue(&q);
    return 0;
}
